# ts5deco-inject 국제화(i18n) 지원 PRD

## 프로젝트 개요
ts5deco-inject TypeScript 5 Modern Decorator DI 프레임워크에 다국어 지원을 추가합니다. 첫 번째 단계로 한국어 지원을 구현하고, 향후 다른 언어 확장이 가능한 구조를 만듭니다.

## 목표
- 프레임워크의 모든 사용자 대면 메시지를 다국어 지원
- 한국어 번역 완료
- 타입 안전한 i18n 시스템 구축
- 기존 API 하위 호환성 유지
- 런타임 언어 변경 지원

## 현재 상황
- 에러 메시지가 `src/types/constants.ts`의 `ERROR_MESSAGES`에 하드코딩
- Container.ts에서 영어 에러 메시지로 Exception 생성
- 국제화 인프라 없음
- 패키지 버전: 0.1.1

## 요구사항

### 기능적 요구사항
1. **다국어 메시지 시스템**
   - 에러 메시지 번역 지원
   - 디버깅 로그 메시지 번역
   - 검증 실패 메시지 번역
   - 설정 관련 경고 메시지 번역

2. **언어 지원**
   - 영어 (기본 언어)
   - 한국어 (첫 번째 추가 언어)
   - 향후 언어 확장 가능한 구조

3. **API 요구사항**
   - `t(key, params?)`: 번역 함수
   - `setLocale(locale)`: 언어 설정
   - `getLocale()`: 현재 언어 반환
   - 환경변수를 통한 기본 언어 설정

### 기술적 요구사항
1. **타입 안전성**
   - 번역 키 자동완성 지원
   - 존재하지 않는 키 사용 시 컴파일 타임 에러
   - 매개변수 불일치 시 타입 에러

2. **성능**
   - 번역 로딩 지연 없음
   - 메모리 효율적인 번역 캐싱
   - 런타임 언어 변경 시 즉시 반영

3. **호환성**
   - 기존 API 변경 없음
   - 기존 에러 메시지 포맷 유지
   - 점진적 적용 가능

### 비기능적 요구사항
1. **확장성**
   - 새로운 언어 추가 용이
   - 번역 파일 구조 일관성
   - 네임스페이스 지원

2. **개발자 경험**
   - 번역 키 명명 규칙 일관성
   - IDE 지원 (자동완성, 타입 체크)
   - 번역 누락 검증 도구

3. **문서화**
   - i18n 사용법 가이드
   - 새 언어 추가 방법
   - 번역 기여 가이드

## 구현 범위

### Phase 1: 기본 i18n 인프라
- i18n 디렉터리 구조 생성
- 타입 시스템 구축
- 기본 유틸리티 함수 구현
- 영어 번역 파일 생성

### Phase 2: 한국어 지원
- 한국어 번역 파일 생성
- 모든 메시지의 한국어 번역
- 언어별 포맷팅 규칙 적용

### Phase 3: 기존 시스템 통합
- ERROR_MESSAGES 상수 교체
- Container.ts 에러 생성 로직 수정
- 모든 하드코딩 문자열 교체

### Phase 4: 테스트 및 검증
- i18n 유닛 테스트 작성
- 언어 전환 통합 테스트
- 번역 완성도 검증

### Phase 5: 문서화
- AI_INSTRUCTIONS.md 업데이트
- LLMs.txt 다국어 가이드 추가
- README 다국어 사용법 추가

## 번역 대상 메시지
- SERVICE_NOT_FOUND: 서비스를 찾을 수 없음
- CIRCULAR_DEPENDENCY: 순환 의존성 감지
- INVALID_PROVIDER: 잘못된 프로바이더
- CONTAINER_DISPOSED: 컨테이너가 해제됨
- INVALID_SCOPE: 잘못된 스코프
- ABSTRACT_CLASS: 추상 클래스 인스턴스화 불가
- MISSING_DEPENDENCY: 누락된 의존성
- INVALID_TOKEN: 잘못된 서비스 토큰
- REGISTRATION_FAILED: 등록 실패
- RESOLUTION_FAILED: 해결 실패

## 성공 기준
1. 모든 에러 메시지가 한국어로 번역됨
2. 런타임에 언어 변경 가능
3. 기존 코드 호환성 100% 유지
4. 타입 안전성 검증 통과
5. 성능 저하 없음 (벤치마크 기준)
6. 문서화 완료

## 제약사항
- 기존 public API 변경 금지
- 번들 크기 10% 이상 증가 금지
- 런타임 성능 영향 최소화
- TypeScript 5.x 호환성 유지

## 향후 확장 계획
- 일본어 지원 추가
- 중국어 (간체/번체) 지원
- 스페인어, 프랑스어, 독일어 지원
- 복수형 처리 로직 개선
- 날짜/시간 포맷 지원